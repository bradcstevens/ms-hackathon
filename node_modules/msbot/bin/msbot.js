#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const chalk = require("chalk");
const program = require("commander");
const process = require("process");
const semver = require("semver");
const utils_1 = require("./utils");
require('log-prefix')(() => utils_1.showMessage('%s'));
program
    .option('--verbose', 'Add [msbot] prefix to all messages')
    .on('option:verbose', () => process.env.VERBOSE = 'verbose');
// tslint:disable-next-line:no-var-requires no-require-imports
const pkg = require('../package.json');
const requiredVersion = pkg.engines.node;
if (!semver.satisfies(process.version, requiredVersion)) {
    console.error(`Required node version ${requiredVersion} not satisfied with current version ${process.version}.`);
    process.exit(1);
}
program.Command.prototype.unknownOption = (flag) => {
    console.error(chalk.default.redBright(`Unknown arguments: ${flag}`));
    program.outputHelp((str) => {
        console.error(str);
        return '';
    });
    process.exit(1);
};
program
    .version(pkg.version, '-v, --Version')
    .description(`The msbot program makes it easy to manipulate .bot files for Microsoft Bot Framework tools.`);
program
    .command('init', 'create a new .bot file');
program
    .command('secret', 'set or clear the secret for a .bot file');
program
    .command('get', 'get a connected service');
program
    .command('list', 'list all connected services');
program
    .command('export', 'export all connected services so that this bot can be cloned');
program
    .command('clone', 'create a new Azure Group and clone all of the .recipe services into it. ');
program
    .command('connect <service>', 'connect to a resource (Luis/Qna/Azure/...) used by the bot');
program
    .command('disconnect <service>', 'disconnect from a resource used by the bot');
program
    .command('update <service>', 'update a service record (Luis/Qna/Azure/...) used by the bot');
const args = program.parse(process.argv);
// args should be undefined is subcommand is executed
if (args) {
    const unknownArgs = process.argv.slice(2);
    console.error(chalk.default.redBright(`Unknown arguments: ${unknownArgs.join(' ')}`));
    program.outputHelp((str) => {
        console.error(str);
        return '';
    });
    process.exit(1);
}
//# sourceMappingURL=msbot.js.map